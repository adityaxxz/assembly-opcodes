// send calldata -> function dispatch —> function

//60008060093d393df3 -> contract creation bytecode
//60018060093d393df3 `5f` -> PUSH 0 opcode (0x00)
//60058060093d393df35f `3560e01c` -> calldata,0xe0,shr

// 0xcdfead2e0000000000000000000000000000000000000000000000000000000000000001
// Let's find the function selector -> route it to the code that updates horses

/* Interface -  Calculate function sigs */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()  // 0

#define macro MAIN() = takes(0) returns(0) {
    0x00                        // [0]
    //0x02                      // TOP [2,0] BOTTOM
    calldataload                // [calldata(32)]

    // How do we cut down the calldata -> func selector?
    // SHR opcode
    // (PUSH2) 0x0102               // [102]
    // 1 bytes = 8 bits             // [4,102]
    // 0x0102 >> 4 = 16             // [10]

    // We need to right shift 28 bytes, 224 bits
    0xe0                            // [224 , calldata(32)]
    shr                             // [function_selector]
    
    //* Jump —> function data associated with the selector
    // If the function_selector == updateHorseNumber -> jump to that code 
    // 0xcdfead2e == update
    // If the function_selector == readNumberOfHorses -> jump to that code 
    // 0xe026c017 == read

    //* updateHorseNumber selector 
    dup1                             // [function_selector,function_selector]
    __FUNC_SIG(updateHorseNumber)     // [0xcdfead2e,function_selector]           
    eq                               // [true if function selector matches]

    // jump to updateHorseNumber code if true
    updateJump                       // [updateHorseNumberProgramCounter,T/F]
    jumpi                            // []

    //* readNumberOfHorses selector
    __FUNC_SIG(readNumberOfHorses)     // [0xe026c017, function_setector]
    eq                                // [true_if_func_selector_matches]
    readJump                          // [readJump, true_if_func_selector_matches]
    jumpi                             // []

    0x00 0x00 revert

    updateJump:
        SET_NO_OF_HORSES()

    readJump:
        GET_NO_OF_HORSES()
}

#define macro SET_NO_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the value to store from calldata
    0x04                                    // [4]
    calldataload                            // [input]

    // 2. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]         // [storage slot, value]          

    // 3. sstore opcode
    sstore
    stop 

} 
#define macro GET_NO_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the storage slot
    // 2. Load the value of that slot into memory
    // 3. Return

    [NUMBER_OF_HORSES_STORAGE_SLOT]             // [key]
    sload                                       // [value]
    0x00                                        // [0,value]   
    mstore                                      // []   *Memory* : [value]

    // 0x20 == 32 bytes
    0x20  0x00  return                          // [] 

    //5f3560e01c8063cdfead2e1461001d5763e026c01714610024575f5ffd5b6004355f55005b5f545f5260205ff3
} 




